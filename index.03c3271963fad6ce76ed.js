(()=>{"use strict";const t=class{constructor(t,e,s,i,n,r,o){this._name=t.name,this._link=t.link,this._userId=e._id,this._ownerId=t.owner._id,this._cardId=t._id,this._template=s,this._handleCardClick=i,this._deleteCard=n,this._likeCard=r,this._dislikeCard=o,this._likeQuantity=t.likes}getTemplateCard=()=>(this._card=document.querySelector(this._template).content.querySelector(".elements__element").cloneNode(!0),this._like=this._card.querySelector(".like__vector"),this._likeQuantityCard=this._card.querySelector(".like__quantity"),this._title=this._card.querySelector(".description__title"),this._image=this._card.querySelector(".element__image"),this._delete=this._card.querySelector(".element__del"),this._fillCard(),this._setEventHandlers(),this._card);likeElement(t){this._likeQuantityCard.textContent=t.likes.length,this._likeQuantity=t.likes,this._like.classList.add("like__vector_active")}dislikeElement(t){this._like.classList.remove("like__vector_active"),this._likeQuantityCard.textContent=t.likes.length,this._likeQuantity=t.likes}_isLike=()=>this._likeQuantity.find((t=>t._id===this._userId));_isYourCard(){return this._ownerId===this._userId}_likeCardForUser(){this._isLike()?this._dislikeCard(this,this._cardId):this._likeCard(this,this._cardId)}deleteCardElement(){this._delete.closest(".element").remove()}_setEventHandlers=()=>{this._delete.addEventListener("click",(()=>this._deleteCard(this,this._cardId))),this._like.addEventListener("click",(()=>this._likeCardForUser())),this._image.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))};_fillCard=()=>{this._isLike()?this._like.classList.add("like__vector_active"):this._like.classList.remove("like__vector_active"),!1===this._isYourCard()&&this._card.querySelector(".element__del").remove(),this._likeQuantityCard.textContent=this._likeQuantity.length,this._image.src=this._link,this._image.alt=this._name,this._title.textContent=this._name}},e=class{constructor(t,e){this._formElement=t,this._config=e}resetValidation(){this._toggleButtonState(),this._inputList.forEach((t=>{this._hideInputError(t)}))}_showInputError=t=>{const e=this._formElement.querySelector(`.${t.id}-error`);e.classList.add(this._config.errorClass),e.textContent=t.validationMessage,t.classList.add(this._config.inputErrorClass)};_hideInputError=t=>{const e=this._formElement.querySelector(`.${t.id}-error`);e.classList.remove(this._config.errorClass),e.textContent="",t.classList.remove(this._config.inputErrorClass)};_checkInputValidity(t){t.validity.valid?this._hideInputError(t):this._showInputError(t)}_hasInvalidInput(){return this._inputList.some((t=>!t.validity.valid))}_toggleButtonState(){this._hasInvalidInput(this._inputList)?(this._buttonElement.classList.remove(this._config.activeButtonClass),this._buttonElement.classList.add(this._config.inactiveButtonClass),this._buttonElement.disabled=!0):(this._buttonElement.classList.add(this._config.activeButtonClass),this._buttonElement.classList.remove(this._config.inactiveButtonClass),this._buttonElement.disabled=!1)}_setEventListeners(){this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._buttonElement=this._formElement.querySelector(this._config.submitButtonSelector),this._toggleButtonState(),this._inputList.forEach((t=>{t.addEventListener("input",(()=>{this._checkInputValidity(t),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}};class s{constructor({items:t,renderer:e},s){this._initialArray=t,this._renderer=e,this._container=document.querySelector(s)}renderItems(){this._initialArray.forEach((t=>{const e=this._renderer(t);this.addItem(e)}))}addItem(t){this._container.prepend(t)}}class i{constructor(t){this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(t){"Escape"==t.code&&this.close()}setEventListeners(){this._popup.querySelector(".popup__close").addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(t=>{t.currentTarget===t.target&&this.close()}))}}class n extends i{constructor(t,e){super(t),this._handleFormSubmit=e,this._form=this._popup.querySelector(".popup__form"),this._inputList=Array.from(this._form.querySelectorAll(".popup__input")),this._buttonSubmit=this._popup.querySelector(".popup__button-submit")}_getInputValues(){return this._formValues={},this._inputList.forEach((t=>{this._formValues[t.name]=t.value})),this._formValues}renameButton(){this._buttonSubmit.textContent="Сохранение..."}nameButton(){this._buttonSubmit.textContent="Сохранить"}close(){super.close(),this._form.reset()}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(t=>{t.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const r={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button-submit",activeButtonClass:"popup__button-submit_valid",inactiveButtonClass:"popup__button-submit_invalid",inputErrorClass:"popup__input_type_error",errorClass:"popup__input-error_visible"},o=document.querySelector(".popup_type_edit-profile"),a=o.querySelector("#editForm"),l=document.querySelector(".info__edit-button"),_=(document.querySelector(".info__title"),document.querySelector(".info__subtitle"),o.querySelector(".popup__input_type_name")),h=o.querySelector(".popup__input_type_job"),c=document.querySelector(".popup_type_edit-avatar").querySelector("#editAvatar"),u=document.querySelector(".popup_type_add-card").querySelector("#addForm"),d=document.querySelector(".profile__add-button"),p=document.querySelector(".profile__avatar-edit");let m;const v=new class{constructor(t,e){this._basePath=t,this._token=e}_getHeaders(){return{"Content-Type":"application/json",authorization:this._token}}_getJson(t){return t.ok?t.json():Promise.reject(`Ошибка: ${t.status}`)}getUserInfo(){return fetch(`${this._basePath}/users/me`,{headers:this._getHeaders()}).then(this._getJson)}getCards(){return fetch(`${this._basePath}/cards`,{headers:this._getHeaders()}).then(this._getJson)}setEditUserInfo(t){return fetch(`${this._basePath}/users/me`,{method:"PATCH",headers:this._getHeaders(),body:JSON.stringify({name:t.name,about:t.job})}).then(this._getJson)}createCard(t){return fetch(`${this._basePath}/cards`,{method:"POST",headers:this._getHeaders(),body:JSON.stringify({name:t.name,link:t.link})}).then(this._getJson)}addLike(t){return fetch(`${this._basePath}/cards/${t}/likes`,{method:"PUT",headers:this._getHeaders()}).then(this._getJson)}deleteLike(t){return fetch(`${this._basePath}/cards/${t}/likes`,{method:"DELETE",headers:this._getHeaders()}).then(this._getJson)}deleteCardApi(t){return fetch(`${this._basePath}/cards/${t}`,{method:"DELETE",headers:this._getHeaders()}).then(this._getJson)}setEditAvatar(t){return fetch(`${this._basePath}/users/me/avatar`,{method:"PATCH",headers:this._getHeaders(),body:JSON.stringify({avatar:t.avatar})}).then(this._getJson)}}("https://mesto.nomoreparties.co/v1/cohort-61","3886a799-4854-4a3c-8a86-4cfa412e7d56"),g=new e(c,r);g.enableValidation();const f=new e(a,r);f.enableValidation();const y=new e(u,r);y.enableValidation();const E=new class extends i{constructor(t){super(t),this._popupImageImg=this._popup.querySelector(".popup__img"),this._popupImageTitle=this._popup.querySelector(".popup__img-title")}open(t,e){super.open(),this._popupImageImg.src=e,this._popupImageImg.alt=t,this._popupImageTitle.textContent=t}close(){super.close(),this._popupImageImg.src="",this._popupImageImg.alt="",this._popupImageTitle.textContent=""}}(".popup_type_img");E.setEventListeners();const k=new class{constructor({name:t,about:e,avatar:s}){this._name=document.querySelector(t),this._about=document.querySelector(e),this._avatar=document.querySelector(s)}getUserInfo(){return{user:this._name.textContent,about:this._about.textContent,_id:this._id,avatar:this._avatar.src}}setUserInfo(t,e,s){this._name.textContent=t,this._about.textContent=e,this._id=s}setUserAvatar(t){this._avatar.src=t}}({name:".info__title",about:".info__subtitle",avatar:".profile__avatar"});Promise.all([v.getUserInfo(),v.getCards()]).then((([t,e])=>{console.log(t),k.setUserInfo(t.name,t.about,t._id,t.avatar),k.setUserAvatar(t.avatar),console.log(e),m=new s({items:e.reverse(),renderer:I},".elements"),m.renderItems()})).catch((t=>{console.log(t)}));const b=new class extends i{constructor(t){super(t),this._button=this._popup.querySelector(".popup__button-submit")}open(t){super.open(),this._handleSubmit=t}setEventListeners(){super.setEventListeners(),this._button.addEventListener("click",(t=>{t.preventDefault(),this._handleSubmit()}))}}(".popup_type_del");b.setEventListeners();const C=new n(".popup_type_edit-profile",(function(t){const{_id:e,avatar:s}=k.getUserInfo();C.renameButton(),v.setEditUserInfo(t).then((()=>{k.setUserInfo(t.name,t.job,e,s),C.close()})).catch((t=>{console.log(t)})).finally((()=>{C.nameButton()}))}));C.setEventListeners(),l.addEventListener("click",(()=>{const{user:t,about:e}=k.getUserInfo();_.value=t,h.value=e,f.resetValidation(),C.open()}));const S=new n(".popup_type_edit-avatar",(function(t){S.renameButton(),v.setEditAvatar(t).then((()=>{k.setUserAvatar(t.avatar),S.close()})).catch((t=>{console.log(t)})).finally((()=>{S.nameButton()}))}));S.setEventListeners(),p.addEventListener("click",(()=>{g.resetValidation(),S.open()}));const L=new n(".popup_type_add-card",(function(t){const e=t.pictureTitle,s=t.pictureLink;L.renameButton(),v.createCard({name:e,link:s}).then((t=>{const e=I(t);m.addItem(e),L.close()})).catch((t=>{console.log(t)})).finally((()=>{L.nameButton()}))}));function I(e){return new t(e,k.getUserInfo(),"#element-template",x,q,B,w).getTemplateCard()}function q(t,e){b.open((()=>{v.deleteCardApi(e).then((()=>{t.deleteCardElement(),b.close()})).catch((t=>{console.log(t)}))}))}function w(t,e){v.deleteLike(e).then((e=>{t.dislikeElement(e)})).catch((t=>{console.log(t)}))}function B(t,e){v.addLike(e).then((e=>{t.likeElement(e)})).catch((t=>{console.log(t)}))}function x(t,e){E.open(t,e)}L.setEventListeners(),d.addEventListener("click",(()=>{y.resetValidation(),L.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,